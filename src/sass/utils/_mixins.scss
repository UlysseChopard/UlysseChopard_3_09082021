@use "sass:meta";
@use "sass:list";
@use "./variables" as var;

@mixin set-property($el) {
  // Si la propriete s'applique a un modifier
  @if list.index(var.$modifiers, $el) {
    @each $block, $elements in var.$structure {
      .#{$block} {
        &--#{$el} {
          @content;
        }
        @each $elem in $elements {
          &__#{$elem}--#{$el} {
            @content;
          }
        }
      }
    };
  } @else {  // Sinon, elle s'applique a un bloc ou un element
    @each $block, $elements in var.$structure {
      @if $el == $block {  // Bloc
        .#{$el} {
          @content;
        }
      }
      @else if list.index($elements, $el) { // Element
        .#{$block}__#{$el} {
          @content;
        }
      };
    };
  };
};

@mixin set-property-for-list($elements...) {
  @each $elem in $elements {
    @include set-property($elem) {
      @content;
    }
  }
};

@mixin set-property-for-all($el, $excepts...) {
  @each $bloc, $liste in var.$structure {
    @if not list.index($excepts, $bloc) {
      @if $bloc == $el {
        @include set-property($el) {
          @content;
        };
        @each $element in $liste {
          @include set-property($element) {
            @content;
          }
        };
      }
      @else {
        @each $element in $liste {
          @if not list.index($excepts, $element) and $element == $el {
            @include set-property($el) {
              @content;
            }
          }
        };
      }
    }
  };
};

@mixin set-property-for-level($level, $page: var.$structure) {
  @if $level == "modifiers" or $level == "modifier" or $level == "mod" {
    @each $modifier in var.$modifiers {
      @include set-property($modifier) {
        @content;
      };
    };
  }
  @else {
    @each $key, $values in $page {
      @if $level == "bloc" or $level == "blocs" {
        @include set-property($key) {
          @content;
        };
      }
      @else if $level == "elements" or $level == "element" or $level == "elem" or $level == "el" {
        @each $value in $values {
          @include set-property($value) {
            @content;
          };
        };
      }
      @else {
        @warn "Mixin set-property-for-level, argument $level: #{$level} inconnu";
      }
    };
  }
};

// @mixin set-property-for-all($page: var.$structure, $exceptions...) {
//   // Si c'est la structure enti√®re
//   @if type-of($value: $page) == "map" {
//     @each $block, $elements in $page {
//       @if not list.index($exceptions, $block) {
//         .#{$block} {
//           @content;
//           @each $elem in $elements {
//             @if not list.index($exceptions, $elem) {
//               &__#{$elem} {
//                 @content;
//               }
//             }
//           }
//         }
//       }
//     }
//   }
//   // C'est un bloc
//   @else if type-of($value: $page) == "list" {
//     @each $element in $page {
//       @if not list.index($exception, $element) {
//         @include set-property($element) {
//           @content;
//         }
//       }
//     }
//   }
//   // C'est un bloc sans element, un element ou un modifier
//   @else {
//     @include set-property($page) {
//       @content;
//     }
//   }
// };

@mixin flex-elem(
  $flex: auto,
  $flex-flow: column nowrap,
  $align-items: center,
  $justify-content: space-evenly
) {
  display: flex;
  flex: $flex;
  flex-flow: $flex-flow;
  align-items: $align-items;
  justify-content: $justify-content;
  min-width: 0;
};

@mixin largeur($l: 100%) {
  width: $l;
  min-width: $l;
  max-width: $l;
};